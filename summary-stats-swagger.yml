openapi: 3.0.3
info:
  title: Stats Summary API
  version: 1.0.0
servers:
  - url: http://localhost:3001/v1/api
tags:
  - name: Employee
    description: Create and delete employees
  - name: SummaryStats
    description: Summary stats for employees
  - name: Auth
    description: authenticate user
security:
  - bearerAuth: []
paths:
  /employees:
    post:
      tags:
        - Employee
      summary: Add a new employee
      description: Add a new employee
      operationId: addEmployee
      security:
        - bearerAuth: []
      requestBody:
        description: Create a new employee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEmployee'
        required: true
      responses:
        '201':
          description: Successfully created employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              example:
                - message: '"name" is required'
                  path:
                    - name
                - message: '"department" is required'
                  path:
                    - department
                - message: '"currency" is required'
                  path:
                    - currency
                - message: '"salary" is required'
                  path:
                    - salary
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No authorization token was found'
                status: 401
        '422':
          description: Error adding employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 422
                message: Error adding new employee record
  /employees/{employeeId}:
    delete:
      tags:
        - Employee
      summary: Deletes an employee
      description: deletes an employee
      operationId: deleteEmployee
      security:
        - bearerAuth: []
      parameters:
        - name: authToken
          in: header
          description: jwt auth token
          required: true
          schema:
            type: string
        - name: employeeId
          in: path
          description: Employee id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: successfull operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No authorization token was found'
                status: 401
  /stats-summary:
    get:
      tags:
        - SummaryStats
      summary: Get stats summary for employees
      description: Get stats summary for employees
      operationId: getStatsSummary
      security:
        - bearerAuth: []
      parameters:
        - name: onContract
          in: query
          description: specifies whether employees are on contract
          required: false
          schema:
            type: boolean
            default: false
        - name: groupBy
          in: query
          description: property names to group by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - department
                - subDepartment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsSummaryResponse'
              example:
                summaryStats:
                  - group:
                      department: Engineering
                      subDepartment: Data
                    stats:
                      mean: 90000
                      max: 90000
                      min: 90000
                  - group:
                      department: Engineering
                      subDepartment: Platform
                    stats:
                      mean: 10000
                      max: 10000
                      min: 10000
        '400':
          description: Invalid request params
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              example:
                - message: '"groupBy" must be one of [department, subDepartment]'
                  path:
                    - groupBy
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: 'No authorization token was found'
                status: 401
  /login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: login user request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
        required: true
      responses:
        '200':
          description: successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid username/password supplied
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginUser:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: foobar
          minLength: 3
          maxLength: 100
        password:
          type: string
          example: password1234
          minLength: 8
    AddEmployee:
      required:
        - name
        - salary
        - currency
        - department
        - sub_department
      type: object
      properties:
        name:
          type: string
          example: Abhishek
        salary:
          type: number
          example: 123400
        department:
          type: string
          example: Engineering
        sub_department:
          type: string
          example: Platform
        on_contract:
          type: string
          example: 'true'
          enum:
            - 'true'
            - 'false'
    Employee:
      type: object
      properties:
        id:
          type: string
          example: MllPxwa8qZ0_dhrkkYI-k
        name:
          type: string
          example: Abhishek
        salary:
          type: number
          example: 123400
        department:
          type: string
          example: Engineering
        subDepartment:
          type: string
          example: Platform
        onContract:
          type: boolean
          example: true
    Stats:
      type: object
      properties:
        min:
          type: number
          example: 44000
        max:
          type: number
          example: 44000
        mean:
          type: number
          format: float
          example: 40239.23
    StatsSummary:
      type: object
      properties:
        group:
          type: object
          properties:
            department:
              type: string
              example: Engineering
            subDepartment:
              type: string
              example: Platform
        stats:
          type: object
          $ref: '#/components/schemas/Stats'
    StatsSummaryResponse:
      type: object
      properties:
        summaryStats:
          type: array
          items:
            $ref: '#/components/schemas/StatsSummary'
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: jwt token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
    ValidationErrorResponse:
      type: array
      items:
        type: object
        properties:
          message:
            type: string
            description: validation error message
          path:
            type: array
            description: json path of the property
            items:
              type: string
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
